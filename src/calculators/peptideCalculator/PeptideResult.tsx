import React from 'react';
import { RefreshCw, Download, Copy, FlaskConical, CheckCircle2, AlertTriangle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  CalculatedPeptideProperties, 
  PeptideData,
  AminoAcid
} from './peptideTypes';
import { aminoAcids, getHydrophobicityColor } from './peptideCalculatorUtils';
import { toast } from 'sonner';

interface PeptideResultProps {
  properties: CalculatedPeptideProperties;
  inputData: PeptideData | null;
  onReset: () => void;
}

const PeptideResult: React.FC<PeptideResultProps> = ({ 
  properties, 
  inputData,
  onReset
}) => {
  const handleCopyToClipboard = (content: string, label: string) => {
    navigator.clipboard.writeText(content)
      .then(() => {
        toast.success(`${label} copied to clipboard`);
      })
      .catch(() => {
        toast.error('Failed to copy to clipboard');
      });
  };
  
  const downloadResults = () => {
    // Format results as text
    let resultsText = `Peptide Analysis Results\n`;
    resultsText += `======================\n\n`;
    resultsText += `Name: ${inputData?.name || 'Unnamed Peptide'}\n`;
    resultsText += `Sequence: ${properties.sequence.original}\n`;
    resultsText += `Length: ${properties.aminoAcidCount} amino acids\n\n`;
    
    resultsText += `Physical Properties:\n`;
    resultsText += `------------------\n`;
    resultsText += `Molecular Weight: ${properties.molecularWeight} Da\n`;
    resultsText += `Isoelectric Point (pI): ${properties.isoelectricPoint}\n`;
    resultsText += `Net Charge at pH 7: ${properties.netCharge.atPh7}\n`;
    resultsText += `Extinction Coefficient: ${properties.extinctionCoefficient} M⁻¹cm⁻¹\n`;
    resultsText += `Absorbance (A280 for 1mg/ml): ${properties.absorbance}\n`;
    resultsText += `Hydrophobicity Index: ${properties.hydrophobicityIndex}\n`;
    resultsText += `Instability Index: ${properties.instabilityIndex}\n`;
    resultsText += `Predicted Solubility: ${properties.solubility}\n\n`;
    
    resultsText += `Estimated Half-Life:\n`;
    resultsText += `-----------------\n`;
    resultsText += `Mammalian cells (in vitro): ${properties.halfLife.mammalian}\n`;
    resultsText += `Yeast (in vivo): ${properties.halfLife.yeast}\n`;
    resultsText += `E. coli (in vivo): ${properties.halfLife.ecoli}\n\n`;
    
    resultsText += `Amino Acid Composition:\n`;
    resultsText += `----------------------\n`;
    
    Object.entries(properties.aminoAcidComposition).forEach(([aa, data]) => {
      resultsText += `${aminoAcids[aa].name} (${aa}): ${data.count} (${data.percentage.toFixed(1)}%)\n`;
    });
    
    resultsText += `\nSequence Formats:\n`;
    resultsText += `---------------\n`;
    resultsText += `Single-letter: ${properties.sequence.oneLetterCodes}\n`;
    resultsText += `Three-letter: ${properties.sequence.threeLetterCodes}\n\n`;
    
    resultsText += `Generated by Lcalculator Peptide Calculator\n`;
    resultsText += `https://lcalculator.com/peptide-calculator\n`;
    
    // Create a blob and download link
    const blob = new Blob([resultsText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${inputData?.name || 'peptide'}_analysis.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('Analysis results downloaded');
  };
  
  // Round numbers for display
  const formatNumber = (num: number, precision: number = 2) => {
    return num.toFixed(precision);
  };
  
  // Sort amino acid composition by count (descending)
  const sortedComposition = Object.entries(properties.aminoAcidComposition)
    .sort((a, b) => b[1].count - a[1].count);
  
  // Calculate stability status
  const isStable = properties.instabilityIndex < 40;
  
  return (
    <div className="space-y-6">
      <div className="flex items-center gap-2 mb-4">
        <FlaskConical className="text-primary h-6 w-6" />
        <h2 className="text-xl font-semibold">Peptide Analysis Results</h2>
      </div>
      
      <div className="bg-primary/5 p-4 rounded-lg">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
          <div>
            <h3 className="text-lg font-medium">
              {inputData?.name || 'Peptide Sequence'}
            </h3>
            <p className="text-sm text-muted-foreground mt-1">
              {properties.aminoAcidCount} amino acids | {formatNumber(properties.molecularWeight)} Da
            </p>
          </div>
          
          <div className="flex gap-2 mt-2 md:mt-0">
            <Button 
              size="sm" 
              variant="outline" 
              className="flex items-center gap-1" 
              onClick={() => handleCopyToClipboard(properties.sequence.original, 'Sequence')}
            >
              <Copy className="h-3.5 w-3.5" /> Copy
            </Button>
            <Button 
              size="sm" 
              variant="outline" 
              className="flex items-center gap-1"
              onClick={downloadResults}
            >
              <Download className="h-3.5 w-3.5" /> Download
            </Button>
          </div>
        </div>
        
        <div className="font-mono text-sm bg-primary/10 p-3 rounded border border-primary/20 overflow-x-auto">
          {properties.sequence.original.split('').map((aa, index) => (
            <span 
              key={index} 
              className="inline-block px-1 py-0.5 m-0.5 rounded"
              style={{ backgroundColor: getHydrophobicityColor(aminoAcids[aa].hydrophobicity) }}
              title={`${aminoAcids[aa].name} (${aa})`}
            >
              {aa}
            </span>
          ))}
        </div>
        
        <div className="text-xs text-muted-foreground mt-2 flex justify-end">
          <div className="flex items-center gap-1.5">
            <span>Hydrophilic</span>
            <div className="w-24 h-3 rounded-full bg-gradient-to-r from-blue-500 via-white to-orange-500"></div>
            <span>Hydrophobic</span>
          </div>
        </div>
      </div>
      
      <Tabs defaultValue="properties">
        <TabsList className="grid grid-cols-3">
          <TabsTrigger value="properties">Properties</TabsTrigger>
          <TabsTrigger value="composition">Composition</TabsTrigger>
          <TabsTrigger value="sequence">Sequence</TabsTrigger>
        </TabsList>
        
        <TabsContent value="properties" className="space-y-4 pt-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="border rounded-lg p-4">
              <h4 className="text-sm font-medium mb-3">Physical Properties</h4>
              
              <div className="space-y-3">
                <div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Molecular Weight</span>
                    <span className="font-medium">{formatNumber(properties.molecularWeight)} Da</span>
                  </div>
                </div>
                
                <div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Isoelectric Point (pI)</span>
                    <span className="font-medium">{formatNumber(properties.isoelectricPoint)}</span>
                  </div>
                </div>
                
                <div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Net Charge (pH 7)</span>
                    <span className="font-medium">{formatNumber(properties.netCharge.atPh7)}</span>
                  </div>
                </div>
                
                <div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Extinction Coefficient</span>
                    <span className="font-medium">{properties.extinctionCoefficient} M⁻¹cm⁻¹</span>
                  </div>
                </div>
                
                <div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Absorbance (A280, 1mg/ml)</span>
                    <span className="font-medium">{formatNumber(properties.absorbance, 3)}</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="border rounded-lg p-4">
              <h4 className="text-sm font-medium mb-3">Stability & Solubility</h4>
              
              <div className="space-y-4">
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span className="text-muted-foreground">Hydrophobicity Index</span>
                    <span className="font-medium">{formatNumber(properties.hydrophobicityIndex)}</span>
                  </div>
                  <Progress 
                    value={((properties.hydrophobicityIndex + 4.5) / 9) * 100} 
                    className="h-2" 
                  />
                  <div className="flex justify-between text-xs text-muted-foreground mt-1">
                    <span>Hydrophilic</span>
                    <span>Hydrophobic</span>
                  </div>
                </div>
                
                <div>
                  <div className="flex justify-between text-sm mb-1">
                    <span className="text-muted-foreground">Instability Index</span>
                    <span className="font-medium">{formatNumber(properties.instabilityIndex)}</span>
                  </div>
                  <Progress 
                    value={(properties.instabilityIndex / 100) * 100} 
                    className="h-2" 
                  />
                  <div className="flex justify-between text-xs text-muted-foreground mt-1">
                    <span>Stable</span>
                    <span>Unstable</span>
                  </div>
                </div>
                
                <div className="flex items-center gap-2 mt-2 text-sm">
                  <span className="text-muted-foreground">Stability:</span>
                  <div className={`flex items-center gap-1 ${isStable ? 'text-green-600' : 'text-amber-600'}`}>
                    {isStable ? (
                      <>
                        <CheckCircle2 className="h-4 w-4" />
                        <span className="font-medium">Likely Stable</span>
                      </>
                    ) : (
                      <>
                        <AlertTriangle className="h-4 w-4" />
                        <span className="font-medium">Potentially Unstable</span>
                      </>
                    )}
                  </div>
                </div>
                
                <div className="text-sm">
                  <span className="text-muted-foreground">Solubility: </span> 
                  <span className="font-medium">{properties.solubility}</span>
                </div>
              </div>
            </div>
          </div>
          
          <div className="border rounded-lg p-4">
            <h4 className="text-sm font-medium mb-3">Estimated Half-Life</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="text-center p-3 bg-primary/5 rounded-lg">
                <div className="text-xs text-muted-foreground mb-1">Mammalian, in vitro</div>
                <div className="font-medium">{properties.halfLife.mammalian}</div>
              </div>
              
              <div className="text-center p-3 bg-primary/5 rounded-lg">
                <div className="text-xs text-muted-foreground mb-1">Yeast, in vivo</div>
                <div className="font-medium">{properties.halfLife.yeast}</div>
              </div>
              
              <div className="text-center p-3 bg-primary/5 rounded-lg">
                <div className="text-xs text-muted-foreground mb-1">E. coli, in vivo</div>
                <div className="font-medium">{properties.halfLife.ecoli}</div>
              </div>
            </div>
            
            <div className="text-xs text-muted-foreground mt-3">
              <p>Half-life estimates are based on the N-end rule and depend primarily on the N-terminal residue.</p>
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="composition" className="space-y-4 pt-4">
          <div className="border rounded-lg p-4">
            <h4 className="text-sm font-medium mb-3">Amino Acid Composition</h4>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3">
              {sortedComposition.map(([aa, data]) => (
                <div key={aa} className="flex items-center gap-2">
                  <div 
                    className="w-6 h-6 flex items-center justify-center rounded-full text-xs font-medium"
                    style={{ backgroundColor: getHydrophobicityColor(aminoAcids[aa].hydrophobicity) }}
                  >
                    {aa}
                  </div>
                  <div className="flex-1">
                    <div className="flex justify-between text-sm">
                      <span className="text-muted-foreground">{aminoAcids[aa].name}</span>
                      <span className="font-medium">{data.count}</span>
                    </div>
                    <Progress value={data.percentage} className="h-1 mt-1" />
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          <div className="border rounded-lg p-4">
            <h4 className="text-sm font-medium mb-3">Amino Acid Properties</h4>
            
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-2 px-3 font-medium">AA</th>
                    <th className="text-left py-2 px-3 font-medium">Name</th>
                    <th className="text-left py-2 px-3 font-medium">MW (Da)</th>
                    <th className="text-left py-2 px-3 font-medium">pKa</th>
                    <th className="text-left py-2 px-3 font-medium">Charge</th>
                    <th className="text-left py-2 px-3 font-medium">Hydrophobicity</th>
                  </tr>
                </thead>
                <tbody>
                  {Object.entries(aminoAcids)
                    .filter(([aa]) => properties.sequence.original.includes(aa))
                    .map(([aa, data]) => (
                      <tr key={aa} className="border-b last:border-0">
                        <td className="py-2 px-3 font-medium">{aa}</td>
                        <td className="py-2 px-3">{data.name}</td>
                        <td className="py-2 px-3">{data.molecularWeight}</td>
                        <td className="py-2 px-3">
                          {data.pKa?.sideChain ? data.pKa.sideChain.toFixed(1) : '-'}
                        </td>
                        <td className="py-2 px-3">
                          {data.charge.positive ? '+' : data.charge.negative ? '-' : 'neutral'}
                        </td>
                        <td className="py-2 px-3">{data.hydrophobicity.toFixed(1)}</td>
                      </tr>
                    ))}
                </tbody>
              </table>
            </div>
          </div>
        </TabsContent>
        
        <TabsContent value="sequence" className="space-y-4 pt-4">
          <div className="border rounded-lg p-4">
            <h4 className="text-sm font-medium mb-3">Sequence Formats</h4>
            
            <div className="space-y-4">
              <div>
                <div className="flex justify-between items-center mb-1">
                  <span className="text-sm text-muted-foreground">Single-letter codes</span>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    className="h-7 text-xs"
                    onClick={() => handleCopyToClipboard(properties.sequence.oneLetterCodes, 'Single-letter sequence')}
                  >
                    <Copy className="h-3.5 w-3.5 mr-1" /> Copy
                  </Button>
                </div>
                <div className="font-mono text-sm bg-primary/5 p-3 rounded overflow-x-auto">
                  {properties.sequence.oneLetterCodes}
                </div>
              </div>
              
              <div>
                <div className="flex justify-between items-center mb-1">
                  <span className="text-sm text-muted-foreground">Three-letter codes</span>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    className="h-7 text-xs"
                    onClick={() => handleCopyToClipboard(properties.sequence.threeLetterCodes, 'Three-letter sequence')}
                  >
                    <Copy className="h-3.5 w-3.5 mr-1" /> Copy
                  </Button>
                </div>
                <div className="font-mono text-sm bg-primary/5 p-3 rounded overflow-x-auto">
                  {properties.sequence.threeLetterCodes}
                </div>
              </div>
              
              <div>
                <div className="flex justify-between items-center mb-1">
                  <span className="text-sm text-muted-foreground">Full Amino Acid Names</span>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    className="h-7 text-xs"
                    onClick={() => handleCopyToClipboard(
                      properties.sequence.original.split('').map(aa => aminoAcids[aa].name).join('-'),
                      'Full amino acid names'
                    )}
                  >
                    <Copy className="h-3.5 w-3.5 mr-1" /> Copy
                  </Button>
                </div>
                <div className="text-sm bg-primary/5 p-3 rounded overflow-x-auto">
                  {properties.sequence.original.split('').map(aa => aminoAcids[aa].name).join('-')}
                </div>
              </div>
            </div>
          </div>
          
          <div className="border rounded-lg p-4">
            <h4 className="text-sm font-medium mb-3">Molecular Formula</h4>
            
            <div className="space-y-3">
              <div className="text-sm">
                <span className="text-muted-foreground">Formula: </span>
                <span className="font-mono">
                  {calculateMolecularFormula(properties.sequence.original)}
                </span>
              </div>
              
              <div className="text-xs text-muted-foreground">
                <p>The molecular formula accounts for peptide bond formation and terminal groups.</p>
              </div>
            </div>
          </div>
        </TabsContent>
      </Tabs>
      
      <div className="flex justify-center mt-6">
        <Button 
          variant="outline" 
          onClick={onReset}
          className="flex items-center gap-1"
        >
          <RefreshCw className="h-4 w-4" /> Try With Different Sequence
        </Button>
      </div>
    </div>
  );
};

// Helper function to calculate molecular formula
const calculateMolecularFormula = (sequence: string): string => {
  // Initialize counters for each element
  let C = 0;
  let H = 0;
  let N = 0;
  let O = 0;
  let S = 0;
  
  // Add elements from each amino acid
  sequence.split('').forEach(aa => {
    const acid = aminoAcids[aa];
    if (!acid) return;
    
    // Parse formula
    const formula = acid.formula;
    
    // Extract C
    const cMatch = formula.match(/C(\d+)/);
    if (cMatch) C += parseInt(cMatch[1], 10);
    
    // Extract H
    const hMatch = formula.match(/H(\d+)/);
    if (hMatch) H += parseInt(hMatch[1], 10);
    
    // Extract N
    const nMatch = formula.match(/N(\d+)/);
    if (nMatch) N += parseInt(nMatch[1], 10);
    
    // Extract O
    const oMatch = formula.match(/O(\d+)/);
    if (oMatch) O += parseInt(oMatch[1], 10);
    
    // Extract S
    const sMatch = formula.match(/S(\d+)/);
    if (sMatch) S += parseInt(sMatch[1], 10);
  });
  
  // Adjust for peptide bonds (lose H2O for each bond)
  H -= 2 * (sequence.length - 1);
  O -= (sequence.length - 1);
  
  // Build formula string
  let formula = '';
  if (C > 0) formula += `C${C}`;
  if (H > 0) formula += `H${H}`;
  if (N > 0) formula += `N${N}`;
  if (O > 0) formula += `O${O}`;
  if (S > 0) formula += `S${S}`;
  
  return formula;
};

export default PeptideResult;
